// This file is @generated by prost-build.
/// Message sent for a telemetry subscription request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionRequest {
    /// Data associated with a telemetry subscription
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<SubscriptionInput>,
    /// List of data models paths and filters
    /// which are used in a telemetry operation.
    #[prost(message, repeated, tag = "2")]
    pub path_list: ::prost::alloc::vec::Vec<Path>,
    /// The below configuration is not defined in Openconfig RPC.
    /// It is a proposed extension to configure additional
    /// subscription request features.
    #[prost(message, optional, tag = "3")]
    pub additional_config: ::core::option::Option<SubscriptionAdditionalConfig>,
}
/// Data associated with a telemetry subscription
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionInput {
    /// List of optional collector endpoints to send data for
    /// this subscription.
    /// If no collector destinations are specified, the collector
    /// destination is assumed to be the requester on the rpc channel.
    #[prost(message, repeated, tag = "1")]
    pub collector_list: ::prost::alloc::vec::Vec<Collector>,
}
/// Collector endpoints to send data specified as an ip+port combination.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collector {
    /// IP address of collector endpoint
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// Transport protocol port number for the collector destination.
    #[prost(uint32, tag = "2")]
    pub port: u32,
}
/// Data model path
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Path {
    /// Data model path of interest
    /// Path specification for elements of OpenConfig data models
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// Regular expression to be used in filtering state leaves
    #[prost(string, tag = "2")]
    pub filter: ::prost::alloc::string::String,
    /// If this is set to true, the target device will only send
    /// updates to the collector upon a change in data value
    #[prost(bool, tag = "3")]
    pub suppress_unchanged: bool,
    /// Maximum time in ms the target device may go without sending
    /// a message to the collector. If this time expires with
    /// suppress-unchanged set, the target device must send an update
    /// message regardless if the data values have changed.
    #[prost(uint32, tag = "4")]
    pub max_silent_interval: u32,
    /// Time in ms between collection and transmission of the
    /// specified data to the collector platform. The target device
    /// will sample the corresponding data (e.g,. a counter) and
    /// immediately send to the collector destination.
    ///
    /// If sample-frequency is set to 0, then the network device
    /// must emit an update upon every datum change.
    #[prost(uint32, tag = "5")]
    pub sample_frequency: u32,
    /// EOM needed for each walk cycle of this path?
    ///    For periodic sensor, applicable for each complete reap
    ///    For event sensor, applicable when initial dump is over
    ///      (same as EOS)
    /// This feature is not implemented currently.
    #[prost(bool, tag = "6")]
    pub need_eom: bool,
    /// To denote if the path is from OC, IETF
    /// or some other standards
    #[prost(string, tag = "100")]
    pub origin: ::prost::alloc::string::String,
    /// Allow the target to decide if the updates need to be sent
    /// periodically or on-change for the leaves under this path.
    ///    If this is set to true and sample_frequency is non-zero,
    ///      then whichever leaves support on-change will be
    ///      streamed on change and other leaves will be streamed
    ///      at the cadence requested as per sample_frequency.
    ///    If this is set to true and sample_frequency is zero,
    ///      then it will be considered as on-change only.
    ///    If this is set to false, then the streaming will be
    ///      will be periodic if sample_frequency is non-zero
    ///      and will be on-change if sample_frequency is zero.
    #[prost(bool, tag = "101")]
    pub target_defined: bool,
}
/// Configure subscription request additional features.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionAdditionalConfig {
    /// limit the number of records sent in the stream
    #[prost(int32, tag = "1")]
    pub limit_records: i32,
    /// limit the time the stream remains open
    #[prost(int32, tag = "2")]
    pub limit_time_seconds: i32,
    /// EOS needed for this subscription?
    #[prost(bool, tag = "3")]
    pub need_eos: bool,
    /// Subscription mode (long-lived, one_off or poll)
    #[prost(enumeration = "SubscriptionMode", tag = "4")]
    pub mode: i32,
}
/// 1. Reply data message sent out using out-of-band channel.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionReply {
    /// Response message to a telemetry subscription creation or
    /// get request.
    #[prost(message, optional, tag = "1")]
    pub response: ::core::option::Option<SubscriptionResponse>,
    /// List of data models paths and filters
    /// which are used in a telemetry operation.
    #[prost(message, repeated, tag = "2")]
    pub path_list: ::prost::alloc::vec::Vec<Path>,
}
/// Response message to a telemetry subscription creation or get request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionResponse {
    /// Unique id for the subscription on the device. This is
    /// generated by the device and returned in a subscription
    /// request or when listing existing subscriptions
    #[prost(uint32, tag = "1")]
    pub subscription_id: u32,
}
/// 2. Telemetry data send back on the same connection as the
///     subscription request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenConfigData {
    /// router name:export IP address
    #[prost(string, tag = "1")]
    pub system_id: ::prost::alloc::string::String,
    /// line card / RE (slot number)
    #[prost(uint32, tag = "2")]
    pub component_id: u32,
    /// PFE (if applicable)
    #[prost(uint32, tag = "3")]
    pub sub_component_id: u32,
    /// Path specification for elements of OpenConfig data models
    #[prost(string, tag = "4")]
    pub path: ::prost::alloc::string::String,
    /// Sequence number, monotonically increasing for each
    /// system_id, component_id, sub_component_id + path.
    #[prost(uint64, tag = "5")]
    pub sequence_number: u64,
    /// timestamp (milliseconds since epoch)
    #[prost(uint64, tag = "6")]
    pub timestamp: u64,
    /// List of key-value pairs
    #[prost(message, repeated, tag = "7")]
    pub kv: ::prost::alloc::vec::Vec<KeyValue>,
    /// For delete. If filled, it indicates delete
    #[prost(message, repeated, tag = "8")]
    pub delete: ::prost::alloc::vec::Vec<Delete>,
    /// If filled, it indicates end of marker for the
    /// respective path in the list.
    #[prost(message, repeated, tag = "9")]
    pub eom: ::prost::alloc::vec::Vec<Eom>,
    /// If filled, it indicates end of sync for complete subscription
    #[prost(bool, tag = "10")]
    pub sync_response: bool,
}
/// Simple Key-value, where value could be one of scalar types
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValue {
    /// Key
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// One of possible values
    #[prost(oneof = "key_value::Value", tags = "5, 6, 7, 8, 9, 10, 11, 12, 13")]
    pub value: ::core::option::Option<key_value::Value>,
}
/// Nested message and enum types in `KeyValue`.
pub mod key_value {
    /// One of possible values
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(double, tag = "5")]
        DoubleValue(f64),
        #[prost(int64, tag = "6")]
        IntValue(i64),
        #[prost(uint64, tag = "7")]
        UintValue(u64),
        #[prost(sint64, tag = "8")]
        SintValue(i64),
        #[prost(bool, tag = "9")]
        BoolValue(bool),
        #[prost(string, tag = "10")]
        StrValue(::prost::alloc::string::String),
        #[prost(bytes, tag = "11")]
        BytesValue(::prost::alloc::vec::Vec<u8>),
        #[prost(float, tag = "12")]
        FloatValue(f32),
        #[prost(message, tag = "13")]
        LeaflistValue(super::ScalarArray),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypedValue {
    /// Scalararray representation
    #[prost(oneof = "typed_value::Value", tags = "1, 2, 3, 4, 5, 6, 7, 8")]
    pub value: ::core::option::Option<typed_value::Value>,
}
/// Nested message and enum types in `TypedValue`.
pub mod typed_value {
    /// Scalararray representation
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(double, tag = "1")]
        LeaflistDoubleValue(f64),
        #[prost(int64, tag = "2")]
        LeaflistIntValue(i64),
        #[prost(uint64, tag = "3")]
        LeaflistUintValue(u64),
        #[prost(sint64, tag = "4")]
        LeaflistSintValue(i64),
        #[prost(bool, tag = "5")]
        LeaflistBoolValue(bool),
        #[prost(string, tag = "6")]
        LeaflistStrValue(::prost::alloc::string::String),
        #[prost(bytes, tag = "7")]
        LeaflistBytesValue(::prost::alloc::vec::Vec<u8>),
        #[prost(float, tag = "8")]
        LeaflistFloatValue(f32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScalarArray {
    #[prost(message, repeated, tag = "1")]
    pub element: ::prost::alloc::vec::Vec<TypedValue>,
}
/// Message indicating delete for a particular path
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Delete {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// Message indicating EOM for a particular path
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eom {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// Message sent for a telemetry subscription cancellation request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelSubscriptionRequest {
    /// Subscription identifier as returned by the device when
    /// subscription was requested
    #[prost(uint32, tag = "1")]
    pub subscription_id: u32,
}
/// Reply to telemetry subscription cancellation request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelSubscriptionReply {
    /// Return code
    #[prost(enumeration = "ReturnCode", tag = "1")]
    pub code: i32,
    /// Return code string
    #[prost(string, tag = "2")]
    pub code_str: ::prost::alloc::string::String,
}
/// Message sent for a telemetry get request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSubscriptionsRequest {
    /// Subscription identifier as returned by the device when
    /// subscription was requested
    /// --- or ---
    /// 0xFFFFFFFF for all subscription identifiers
    #[prost(uint32, tag = "1")]
    pub subscription_id: u32,
}
/// Reply to telemetry subscription get request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSubscriptionsReply {
    /// List of current telemetry subscriptions
    #[prost(message, repeated, tag = "1")]
    pub subscription_list: ::prost::alloc::vec::Vec<SubscriptionReply>,
}
/// Message sent for telemetry agent operational states request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOperationalStateRequest {
    /// Per-subscription_id level operational state can be requested.
    ///
    /// Subscription identifier as returned by the device when
    /// subscription was requested
    /// --- or ---
    /// 0xFFFFFFFF for all subscription identifiers including agent-level
    /// operational stats
    /// --- or ---
    /// If subscription_id is not present then sent only agent-level
    /// operational stats
    #[prost(uint32, tag = "1")]
    pub subscription_id: u32,
    /// Control verbosity of the output
    #[prost(enumeration = "VerbosityLevel", tag = "2")]
    pub verbosity: i32,
}
/// Reply to telemetry agent operational states request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOperationalStateReply {
    /// List of key-value pairs where
    ///      key      = operational state definition
    ///      value    = operational state value
    #[prost(message, repeated, tag = "1")]
    pub kv: ::prost::alloc::vec::Vec<KeyValue>,
}
/// Message sent for a data encoding request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataEncodingRequest {}
/// Reply to data encodings supported request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataEncodingReply {
    #[prost(enumeration = "EncodingType", repeated, tag = "1")]
    pub encoding_list: ::prost::alloc::vec::Vec<i32>,
}
/// Result of the operation
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReturnCode {
    Success = 0,
    NoSubscriptionEntry = 1,
    UnknownError = 2,
}
impl ReturnCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ReturnCode::Success => "SUCCESS",
            ReturnCode::NoSubscriptionEntry => "NO_SUBSCRIPTION_ENTRY",
            ReturnCode::UnknownError => "UNKNOWN_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUCCESS" => Some(Self::Success),
            "NO_SUBSCRIPTION_ENTRY" => Some(Self::NoSubscriptionEntry),
            "UNKNOWN_ERROR" => Some(Self::UnknownError),
            _ => None,
        }
    }
}
/// Verbosity Level
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VerbosityLevel {
    Detail = 0,
    Terse = 1,
    Brief = 2,
}
impl VerbosityLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VerbosityLevel::Detail => "DETAIL",
            VerbosityLevel::Terse => "TERSE",
            VerbosityLevel::Brief => "BRIEF",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DETAIL" => Some(Self::Detail),
            "TERSE" => Some(Self::Terse),
            "BRIEF" => Some(Self::Brief),
            _ => None,
        }
    }
}
/// Encoding Type Supported
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EncodingType {
    Undefined = 0,
    Xml = 1,
    JsonIetf = 2,
    Proto3 = 3,
}
impl EncodingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EncodingType::Undefined => "UNDEFINED",
            EncodingType::Xml => "XML",
            EncodingType::JsonIetf => "JSON_IETF",
            EncodingType::Proto3 => "PROTO3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNDEFINED" => Some(Self::Undefined),
            "XML" => Some(Self::Xml),
            "JSON_IETF" => Some(Self::JsonIetf),
            "PROTO3" => Some(Self::Proto3),
            _ => None,
        }
    }
}
/// Subscription modes supported
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SubscriptionMode {
    LongLived = 0,
    OneOff = 1,
    Poll = 2,
}
impl SubscriptionMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SubscriptionMode::LongLived => "LONG_LIVED",
            SubscriptionMode::OneOff => "ONE_OFF",
            SubscriptionMode::Poll => "POLL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LONG_LIVED" => Some(Self::LongLived),
            "ONE_OFF" => Some(Self::OneOff),
            "POLL" => Some(Self::Poll),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod open_config_telemetry_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Interface exported by Agent
    #[derive(Debug, Clone)]
    pub struct OpenConfigTelemetryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl OpenConfigTelemetryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> OpenConfigTelemetryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> OpenConfigTelemetryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            OpenConfigTelemetryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Request an inline subscription for data at the specified path.
        /// The device should send telemetry data back on the same
        /// connection as the subscription request.
        pub async fn telemetry_subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::OpenConfigData>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/telemetry.OpenConfigTelemetry/telemetrySubscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "telemetry.OpenConfigTelemetry",
                        "telemetrySubscribe",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Terminates and removes an exisiting telemetry subscription
        pub async fn cancel_telemetry_subscription(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelSubscriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelSubscriptionReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/telemetry.OpenConfigTelemetry/cancelTelemetrySubscription",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "telemetry.OpenConfigTelemetry",
                        "cancelTelemetrySubscription",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get the list of current telemetry subscriptions from the
        /// target. This command returns a list of existing subscriptions
        /// not including those that are established via configuration.
        pub async fn get_telemetry_subscriptions(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSubscriptionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSubscriptionsReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/telemetry.OpenConfigTelemetry/getTelemetrySubscriptions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "telemetry.OpenConfigTelemetry",
                        "getTelemetrySubscriptions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get Telemetry Agent Operational States
        pub async fn get_telemetry_operational_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetOperationalStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetOperationalStateReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/telemetry.OpenConfigTelemetry/getTelemetryOperationalState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "telemetry.OpenConfigTelemetry",
                        "getTelemetryOperationalState",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Return the set of data encodings supported by the device for
        /// telemetry data
        pub async fn get_data_encodings(
            &mut self,
            request: impl tonic::IntoRequest<super::DataEncodingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataEncodingReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/telemetry.OpenConfigTelemetry/getDataEncodings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("telemetry.OpenConfigTelemetry", "getDataEncodings"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod open_config_telemetry_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with OpenConfigTelemetryServer.
    #[async_trait]
    pub trait OpenConfigTelemetry: Send + Sync + 'static {
        /// Server streaming response type for the telemetrySubscribe method.
        type telemetrySubscribeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::OpenConfigData, tonic::Status>,
            >
            + Send
            + 'static;
        /// Request an inline subscription for data at the specified path.
        /// The device should send telemetry data back on the same
        /// connection as the subscription request.
        async fn telemetry_subscribe(
            &self,
            request: tonic::Request<super::SubscriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::telemetrySubscribeStream>,
            tonic::Status,
        >;
        /// Terminates and removes an exisiting telemetry subscription
        async fn cancel_telemetry_subscription(
            &self,
            request: tonic::Request<super::CancelSubscriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelSubscriptionReply>,
            tonic::Status,
        >;
        /// Get the list of current telemetry subscriptions from the
        /// target. This command returns a list of existing subscriptions
        /// not including those that are established via configuration.
        async fn get_telemetry_subscriptions(
            &self,
            request: tonic::Request<super::GetSubscriptionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSubscriptionsReply>,
            tonic::Status,
        >;
        /// Get Telemetry Agent Operational States
        async fn get_telemetry_operational_state(
            &self,
            request: tonic::Request<super::GetOperationalStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetOperationalStateReply>,
            tonic::Status,
        >;
        /// Return the set of data encodings supported by the device for
        /// telemetry data
        async fn get_data_encodings(
            &self,
            request: tonic::Request<super::DataEncodingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataEncodingReply>,
            tonic::Status,
        >;
    }
    /// Interface exported by Agent
    #[derive(Debug)]
    pub struct OpenConfigTelemetryServer<T: OpenConfigTelemetry> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: OpenConfigTelemetry> OpenConfigTelemetryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for OpenConfigTelemetryServer<T>
    where
        T: OpenConfigTelemetry,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/telemetry.OpenConfigTelemetry/telemetrySubscribe" => {
                    #[allow(non_camel_case_types)]
                    struct telemetrySubscribeSvc<T: OpenConfigTelemetry>(pub Arc<T>);
                    impl<
                        T: OpenConfigTelemetry,
                    > tonic::server::ServerStreamingService<super::SubscriptionRequest>
                    for telemetrySubscribeSvc<T> {
                        type Response = super::OpenConfigData;
                        type ResponseStream = T::telemetrySubscribeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscriptionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OpenConfigTelemetry>::telemetry_subscribe(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = telemetrySubscribeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/telemetry.OpenConfigTelemetry/cancelTelemetrySubscription" => {
                    #[allow(non_camel_case_types)]
                    struct cancelTelemetrySubscriptionSvc<T: OpenConfigTelemetry>(
                        pub Arc<T>,
                    );
                    impl<
                        T: OpenConfigTelemetry,
                    > tonic::server::UnaryService<super::CancelSubscriptionRequest>
                    for cancelTelemetrySubscriptionSvc<T> {
                        type Response = super::CancelSubscriptionReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelSubscriptionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OpenConfigTelemetry>::cancel_telemetry_subscription(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = cancelTelemetrySubscriptionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/telemetry.OpenConfigTelemetry/getTelemetrySubscriptions" => {
                    #[allow(non_camel_case_types)]
                    struct getTelemetrySubscriptionsSvc<T: OpenConfigTelemetry>(
                        pub Arc<T>,
                    );
                    impl<
                        T: OpenConfigTelemetry,
                    > tonic::server::UnaryService<super::GetSubscriptionsRequest>
                    for getTelemetrySubscriptionsSvc<T> {
                        type Response = super::GetSubscriptionsReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSubscriptionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OpenConfigTelemetry>::get_telemetry_subscriptions(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = getTelemetrySubscriptionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/telemetry.OpenConfigTelemetry/getTelemetryOperationalState" => {
                    #[allow(non_camel_case_types)]
                    struct getTelemetryOperationalStateSvc<T: OpenConfigTelemetry>(
                        pub Arc<T>,
                    );
                    impl<
                        T: OpenConfigTelemetry,
                    > tonic::server::UnaryService<super::GetOperationalStateRequest>
                    for getTelemetryOperationalStateSvc<T> {
                        type Response = super::GetOperationalStateReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetOperationalStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OpenConfigTelemetry>::get_telemetry_operational_state(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = getTelemetryOperationalStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/telemetry.OpenConfigTelemetry/getDataEncodings" => {
                    #[allow(non_camel_case_types)]
                    struct getDataEncodingsSvc<T: OpenConfigTelemetry>(pub Arc<T>);
                    impl<
                        T: OpenConfigTelemetry,
                    > tonic::server::UnaryService<super::DataEncodingRequest>
                    for getDataEncodingsSvc<T> {
                        type Response = super::DataEncodingReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DataEncodingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OpenConfigTelemetry>::get_data_encodings(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = getDataEncodingsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: OpenConfigTelemetry> Clone for OpenConfigTelemetryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: OpenConfigTelemetry> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: OpenConfigTelemetry> tonic::server::NamedService
    for OpenConfigTelemetryServer<T> {
        const NAME: &'static str = "telemetry.OpenConfigTelemetry";
    }
}
